

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 14 12:58:34 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F1619 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  0111                     	;# 
   114  0112                     	;# 
   115  0113                     	;# 
   116  0114                     	;# 
   117  0115                     	;# 
   118  0116                     	;# 
   119  0117                     	;# 
   120  0118                     	;# 
   121  0119                     	;# 
   122  011C                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  018E                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0194                     	;# 
   132  0195                     	;# 
   133  0196                     	;# 
   134  0197                     	;# 
   135  0199                     	;# 
   136  0199                     	;# 
   137  0199                     	;# 
   138  019A                     	;# 
   139  019A                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019C                     	;# 
   147  019C                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019D                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019E                     	;# 
   154  019E                     	;# 
   155  019F                     	;# 
   156  019F                     	;# 
   157  019F                     	;# 
   158  019F                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020D                     	;# 
   162  020E                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0216                     	;# 
   176  0216                     	;# 
   177  0217                     	;# 
   178  0217                     	;# 
   179  028C                     	;# 
   180  028D                     	;# 
   181  028E                     	;# 
   182  0291                     	;# 
   183  0291                     	;# 
   184  0292                     	;# 
   185  0293                     	;# 
   186  0294                     	;# 
   187  0298                     	;# 
   188  0298                     	;# 
   189  0299                     	;# 
   190  029A                     	;# 
   191  029B                     	;# 
   192  029E                     	;# 
   193  030C                     	;# 
   194  030D                     	;# 
   195  030E                     	;# 
   196  038C                     	;# 
   197  038D                     	;# 
   198  038E                     	;# 
   199  0391                     	;# 
   200  0392                     	;# 
   201  0393                     	;# 
   202  0394                     	;# 
   203  0395                     	;# 
   204  0396                     	;# 
   205  0397                     	;# 
   206  0398                     	;# 
   207  0399                     	;# 
   208  040E                     	;# 
   209  0413                     	;# 
   210  0413                     	;# 
   211  0414                     	;# 
   212  0414                     	;# 
   213  0415                     	;# 
   214  0416                     	;# 
   215  0417                     	;# 
   216  0418                     	;# 
   217  041A                     	;# 
   218  041A                     	;# 
   219  041B                     	;# 
   220  041B                     	;# 
   221  041C                     	;# 
   222  041D                     	;# 
   223  041E                     	;# 
   224  041F                     	;# 
   225  0493                     	;# 
   226  0494                     	;# 
   227  0495                     	;# 
   228  0496                     	;# 
   229  049A                     	;# 
   230  049B                     	;# 
   231  049C                     	;# 
   232  049D                     	;# 
   233  058C                     	;# 
   234  058C                     	;# 
   235  058D                     	;# 
   236  058E                     	;# 
   237  058E                     	;# 
   238  058F                     	;# 
   239  0590                     	;# 
   240  0590                     	;# 
   241  0591                     	;# 
   242  0592                     	;# 
   243  0592                     	;# 
   244  0593                     	;# 
   245  0594                     	;# 
   246  0594                     	;# 
   247  0595                     	;# 
   248  0596                     	;# 
   249  0596                     	;# 
   250  0597                     	;# 
   251  0598                     	;# 
   252  0599                     	;# 
   253  059A                     	;# 
   254  059B                     	;# 
   255  059B                     	;# 
   256  059C                     	;# 
   257  059D                     	;# 
   258  060C                     	;# 
   259  060C                     	;# 
   260  060D                     	;# 
   261  060E                     	;# 
   262  060F                     	;# 
   263  060F                     	;# 
   264  0610                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0614                     	;# 
   269  0617                     	;# 
   270  0617                     	;# 
   271  0618                     	;# 
   272  0619                     	;# 
   273  061A                     	;# 
   274  061A                     	;# 
   275  061B                     	;# 
   276  061C                     	;# 
   277  0691                     	;# 
   278  0692                     	;# 
   279  0693                     	;# 
   280  0694                     	;# 
   281  0695                     	;# 
   282  0696                     	;# 
   283  0697                     	;# 
   284  0699                     	;# 
   285  069A                     	;# 
   286  0711                     	;# 
   287  0712                     	;# 
   288  0713                     	;# 
   289  0714                     	;# 
   290  0715                     	;# 
   291  0718                     	;# 
   292  0718                     	;# 
   293  0719                     	;# 
   294  071A                     	;# 
   295  071A                     	;# 
   296  071B                     	;# 
   297  071C                     	;# 
   298  071D                     	;# 
   299  0791                     	;# 
   300  0791                     	;# 
   301  0792                     	;# 
   302  0793                     	;# 
   303  0793                     	;# 
   304  0794                     	;# 
   305  0795                     	;# 
   306  0795                     	;# 
   307  0796                     	;# 
   308  0797                     	;# 
   309  0797                     	;# 
   310  0798                     	;# 
   311  0799                     	;# 
   312  079A                     	;# 
   313  080C                     	;# 
   314  080C                     	;# 
   315  080D                     	;# 
   316  080E                     	;# 
   317  080E                     	;# 
   318  080F                     	;# 
   319  0810                     	;# 
   320  0810                     	;# 
   321  0811                     	;# 
   322  0812                     	;# 
   323  0812                     	;# 
   324  0813                     	;# 
   325  0814                     	;# 
   326  0815                     	;# 
   327  0816                     	;# 
   328  0817                     	;# 
   329  0818                     	;# 
   330  0819                     	;# 
   331  081A                     	;# 
   332  081A                     	;# 
   333  081B                     	;# 
   334  081C                     	;# 
   335  081C                     	;# 
   336  081D                     	;# 
   337  088C                     	;# 
   338  088D                     	;# 
   339  088E                     	;# 
   340  088F                     	;# 
   341  088F                     	;# 
   342  0890                     	;# 
   343  0891                     	;# 
   344  0892                     	;# 
   345  0893                     	;# 
   346  0893                     	;# 
   347  0894                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  0897                     	;# 
   351  0897                     	;# 
   352  0898                     	;# 
   353  0899                     	;# 
   354  0D8C                     	;# 
   355  0D8C                     	;# 
   356  0D8D                     	;# 
   357  0D8E                     	;# 
   358  0D8F                     	;# 
   359  0D8F                     	;# 
   360  0D90                     	;# 
   361  0D91                     	;# 
   362  0D92                     	;# 
   363  0D92                     	;# 
   364  0D93                     	;# 
   365  0D94                     	;# 
   366  0D95                     	;# 
   367  0D95                     	;# 
   368  0D96                     	;# 
   369  0D97                     	;# 
   370  0D98                     	;# 
   371  0D99                     	;# 
   372  0D9A                     	;# 
   373  0D9B                     	;# 
   374  0D9C                     	;# 
   375  0D9D                     	;# 
   376  0D9E                     	;# 
   377  0D9E                     	;# 
   378  0D9F                     	;# 
   379  0DA0                     	;# 
   380  0DA1                     	;# 
   381  0DA1                     	;# 
   382  0DA2                     	;# 
   383  0DA3                     	;# 
   384  0DA4                     	;# 
   385  0DA4                     	;# 
   386  0DA5                     	;# 
   387  0DA6                     	;# 
   388  0DA7                     	;# 
   389  0DA7                     	;# 
   390  0DA8                     	;# 
   391  0DA9                     	;# 
   392  0DAA                     	;# 
   393  0DAB                     	;# 
   394  0DAC                     	;# 
   395  0DAD                     	;# 
   396  0DAE                     	;# 
   397  0DAF                     	;# 
   398  0E0F                     	;# 
   399  0E10                     	;# 
   400  0E11                     	;# 
   401  0E12                     	;# 
   402  0E13                     	;# 
   403  0E14                     	;# 
   404  0E15                     	;# 
   405  0E16                     	;# 
   406  0E17                     	;# 
   407  0E18                     	;# 
   408  0E19                     	;# 
   409  0E1A                     	;# 
   410  0E1B                     	;# 
   411  0E1C                     	;# 
   412  0E1D                     	;# 
   413  0E1E                     	;# 
   414  0E1F                     	;# 
   415  0E20                     	;# 
   416  0E21                     	;# 
   417  0E22                     	;# 
   418  0E23                     	;# 
   419  0E24                     	;# 
   420  0E25                     	;# 
   421  0E26                     	;# 
   422  0E27                     	;# 
   423  0E28                     	;# 
   424  0E29                     	;# 
   425  0E2A                     	;# 
   426  0E2B                     	;# 
   427  0E2C                     	;# 
   428  0E2D                     	;# 
   429  0E2E                     	;# 
   430  0E90                     	;# 
   431  0E91                     	;# 
   432  0E92                     	;# 
   433  0E94                     	;# 
   434  0E95                     	;# 
   435  0E9C                     	;# 
   436  0E9D                     	;# 
   437  0E9E                     	;# 
   438  0E9F                     	;# 
   439  0EA0                     	;# 
   440  0EA1                     	;# 
   441  0EA2                     	;# 
   442  0EA3                     	;# 
   443  0EA4                     	;# 
   444  0EA5                     	;# 
   445  0EA6                     	;# 
   446  0EA7                     	;# 
   447  0F0F                     	;# 
   448  0F10                     	;# 
   449  0F11                     	;# 
   450  0F12                     	;# 
   451  0F13                     	;# 
   452  0F14                     	;# 
   453  0F15                     	;# 
   454  0F16                     	;# 
   455  0F17                     	;# 
   456  0F18                     	;# 
   457  0F19                     	;# 
   458  0F1A                     	;# 
   459  0F1B                     	;# 
   460  0F1C                     	;# 
   461  0F1D                     	;# 
   462  0F1E                     	;# 
   463  0F1F                     	;# 
   464  0F20                     	;# 
   465  0F21                     	;# 
   466  0F22                     	;# 
   467  0F23                     	;# 
   468  0F24                     	;# 
   469  0F25                     	;# 
   470  0F26                     	;# 
   471  0F27                     	;# 
   472  0F28                     	;# 
   473  0F29                     	;# 
   474  0F2A                     	;# 
   475  0F2B                     	;# 
   476  0F2C                     	;# 
   477  0F2D                     	;# 
   478  0F2E                     	;# 
   479  0F2F                     	;# 
   480  0F30                     	;# 
   481  0F31                     	;# 
   482  0F32                     	;# 
   483  0F33                     	;# 
   484  0F34                     	;# 
   485  0F35                     	;# 
   486  0F36                     	;# 
   487  0F37                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499                           
   500                           	psect	idataCOMMON
   501  0169                     __pidataCOMMON:	
   502                           
   503                           ;initializer for _program_limit
   504  0169  3402               	retlw	2
   505  016A  3400               	retlw	0
   506                           
   507                           ;initializer for _program_num
   508  016B  3401               	retlw	1
   509  016C  3400               	retlw	0
   510                           
   511                           	psect	idataBANK0
   512  016D                     __pidataBANK0:	
   513                           
   514                           ;initializer for _sw1_debounce_thres
   515  016D  3405               	retlw	5
   516  016E  3400               	retlw	0
   517  001C                     _T2CONbits	set	28
   518  001B                     _PR2	set	27
   519  000E                     _PORTCbits	set	14
   520  000B                     _INTCONbits	set	11
   521  009B                     _ADRESL	set	155
   522  009C                     _ADRESH	set	156
   523  0095                     _OPTION_REGbits	set	149
   524  0099                     _OSCCONbits	set	153
   525  009D                     _ADCON0bits	set	157
   526  009E                     _ADCON1bits	set	158
   527  008E                     _TRISC	set	142
   528  008D                     _TRISB	set	141
   529  008C                     _TRISA	set	140
   530  010C                     _LATAbits	set	268
   531  010E                     _LATCbits	set	270
   532  010E                     _LATC	set	270
   533  010D                     _LATB	set	269
   534  010C                     _LATA	set	268
   535  018E                     _ANSELC	set	398
   536  018D                     _ANSELB	set	397
   537  018C                     _ANSELA	set	396
   538  020E                     _WPUCbits	set	526
   539  0617                     _PWM3DCL	set	1559
   540  0618                     _PWM3DCH	set	1560
   541  0619                     _PWM3CONbits	set	1561
   542  0EA5                     _RC5PPS	set	3749
   543  0E92                     _RA2PPS	set	3730
   544  0E91                     _RA1PPS	set	3729
   545  0E95                     _RA5PPS	set	3733
   546                           
   547                           ; #config settings
   548  0000                     
   549                           	psect	cinit
   550  0035                     start_initialization:	
   551  0035                     __initialization:	
   552                           
   553                           ; Initialize objects allocated to COMMON
   554  0035  3181  2169  3180   	fcall	__pidataCOMMON	;fetch initializer
   555  0038  00F0               	movwf	__pdataCOMMON& (0+127)
   556  0039  3181  216A  3180   	fcall	__pidataCOMMON+1	;fetch initializer
   557  003C  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   558  003D  3181  216B  3180   	fcall	__pidataCOMMON+2	;fetch initializer
   559  0040  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   560  0041  3181  216C  3180   	fcall	__pidataCOMMON+3	;fetch initializer
   561  0044  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   562                           
   563                           ; Initialize objects allocated to BANK0
   564  0045  3181  216D  3180   	fcall	__pidataBANK0	;fetch initializer
   565  0048  00A8               	movwf	__pdataBANK0& (0+127)
   566  0049  3181  216E         	fcall	__pidataBANK0+1	;fetch initializer
   567  004B  00A9               	movwf	(__pdataBANK0+1)& (0+127)
   568                           
   569                           ; Clear objects allocated to COMMON
   570  004C  01F8               	clrf	__pbssCOMMON& (0+127)
   571  004D  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   572                           
   573                           ; Clear objects allocated to BANK0
   574  004E  01A0               	clrf	__pbssBANK0& (0+127)
   575  004F  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   576  0050  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   577  0051  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   578  0052                     end_of_initialization:	
   579                           ;End of C runtime variable initialization code
   580                           
   581  0052                     __end_of__initialization:	
   582  0052  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   583  0053  0020               	movlb	0
   584  0054  3181  2961         	ljmp	_main	;jump to C main() function
   585                           
   586                           	psect	bssCOMMON
   587  0078                     __pbssCOMMON:	
   588  0078                     _adc_msb:	
   589  0078                     	ds	2
   590                           
   591                           	psect	dataCOMMON
   592  0070                     __pdataCOMMON:	
   593  0070                     _program_limit:	
   594  0070                     	ds	2
   595  0072                     _program_num:	
   596  0072                     	ds	2
   597                           
   598                           	psect	bssBANK0
   599  0020                     __pbssBANK0:	
   600  0020                     _sw1_debounce_count:	
   601  0020                     	ds	2
   602  0022                     _duty_cycle:	
   603  0022                     	ds	2
   604                           
   605                           	psect	dataBANK0
   606  0028                     __pdataBANK0:	
   607  0028                     _sw1_debounce_thres:	
   608  0028                     	ds	2
   609                           
   610                           	psect	cstackCOMMON
   611  0074                     __pcstackCOMMON:	
   612  0074                     ?_setup:	
   613  0074                     ?_loop:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0074                     ?_firstProgram:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0074                     ?_secondProgram:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0074                     ?_myIsr:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0074                     ??_myIsr:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0074                     ?_main:	
   629                           ; 1 bytes @ 0x0
   630                           
   631                           
   632                           ; 2 bytes @ 0x0
   633  0074                     	ds	1
   634  0075                     ??_setup:	
   635  0075                     ?_ADC_Start:	
   636                           ; 1 bytes @ 0x1
   637                           
   638  0075                     ?_PWM_Start:	
   639                           ; 1 bytes @ 0x1
   640                           
   641  0075                     ADC_Start@ch_sel:	
   642                           ; 1 bytes @ 0x1
   643                           
   644  0075                     PWM_Start@dc:	
   645                           ; 2 bytes @ 0x1
   646                           
   647                           
   648                           ; 2 bytes @ 0x1
   649  0075                     	ds	2
   650  0077                     ??_ADC_Start:	
   651  0077                     ??_PWM_Start:	
   652                           ; 1 bytes @ 0x3
   653                           
   654                           
   655                           ; 1 bytes @ 0x3
   656  0077                     	ds	1
   657  0078                     ??_loop:	
   658  0078                     ??_secondProgram:	
   659                           ; 1 bytes @ 0x4
   660                           
   661  0078                     ??_main:	
   662                           ; 1 bytes @ 0x4
   663                           
   664                           
   665                           	psect	cstackBANK0
   666  0024                     __pcstackBANK0:	
   667                           ; 1 bytes @ 0x4
   668                           
   669  0024                     ??_firstProgram:	
   670                           
   671                           ; 1 bytes @ 0x0
   672  0024                     	ds	4
   673                           
   674                           	psect	maintext
   675  0161                     __pmaintext:	
   676 ;;
   677 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   678 ;;
   679 ;; *************** function _main *****************
   680 ;; Defined at:
   681 ;;		line 69 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  2   99[None  ] int 
   688 ;; Registers used:
   689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : B1F/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels required when called:    4
   701 ;; This function calls:
   702 ;;		_loop
   703 ;;		_setup
   704 ;; This function is called by:
   705 ;;		Startup code after reset
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           
   710                           ;psect for function _main
   711  0161                     _main:	
   712                           
   713                           ;main.c: 70:     setup();
   714                           
   715                           ;incstack = 0
   716                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   717  0161  3180  20CE  3181   	fcall	_setup
   718  0164                     l914:	
   719                           
   720                           ;main.c: 72:         loop();
   721  0164  3181  2137  3181   	fcall	_loop
   722  0167  0064               	clrwdt	;# 
   723  0168  2964               	goto	l914
   724  0169                     __end_of_main:	
   725                           
   726                           	psect	text1
   727  00CE                     __ptext1:	
   728 ;; *************** function _setup *****************
   729 ;; Defined at:
   730 ;;		line 77 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, status,2, status,0
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   746 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   748 ;;Total ram usage:        1 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    1
   751 ;; This function calls:
   752 ;;		Nothing
   753 ;; This function is called by:
   754 ;;		_main
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           
   759                           ;psect for function _setup
   760  00CE                     _setup:	
   761                           
   762                           ;main.c: 79:     TRISA = 0b00000000;
   763                           
   764                           ;incstack = 0
   765                           ; Regs used in _setup: [wreg+status,2+status,0]
   766  00CE  0021               	movlb	1	; select bank1
   767  00CF  018C               	clrf	12	;volatile
   768                           
   769                           ;main.c: 80:     ANSELA = 0b00000000;
   770  00D0  0023               	movlb	3	; select bank3
   771  00D1  018C               	clrf	12	;volatile
   772                           
   773                           ;main.c: 81:     TRISB = 0b00000000;
   774  00D2  0021               	movlb	1	; select bank1
   775  00D3  018D               	clrf	13	;volatile
   776                           
   777                           ;main.c: 82:     ANSELB = 0b00000000;
   778  00D4  0023               	movlb	3	; select bank3
   779  00D5  018D               	clrf	13	;volatile
   780                           
   781                           ;main.c: 83:     TRISC = 0b00010001;
   782  00D6  3011               	movlw	17
   783  00D7  0021               	movlb	1	; select bank1
   784  00D8  008E               	movwf	14	;volatile
   785                           
   786                           ;main.c: 84:     ANSELC = 0b00000001;
   787  00D9  3001               	movlw	1
   788  00DA  0023               	movlb	3	; select bank3
   789  00DB  008E               	movwf	14	;volatile
   790                           
   791                           ;main.c: 88:     WPUCbits.WPUC0 = 0;
   792  00DC  0024               	movlb	4	; select bank4
   793  00DD  100E               	bcf	14,0	;volatile
   794                           
   795                           ;main.c: 89:     ADCON1bits.ADFM = 0;
   796  00DE  0021               	movlb	1	; select bank1
   797  00DF  139E               	bcf	30,7	;volatile
   798                           
   799                           ;main.c: 90:     ADCON1bits.ADCS = 0b000;
   800  00E0  308F               	movlw	-113
   801  00E1  059E               	andwf	30,f	;volatile
   802                           
   803                           ;main.c: 91:     ADCON1bits.ADPREF = 0b00;
   804  00E2  30FC               	movlw	-4
   805  00E3  059E               	andwf	30,f	;volatile
   806                           
   807                           ;main.c: 92:     ADCON0bits.CHS = 0b00100;
   808  00E4  081D               	movf	29,w	;volatile
   809  00E5  3983               	andlw	-125
   810  00E6  3810               	iorlw	16
   811  00E7  009D               	movwf	29	;volatile
   812                           
   813                           ;main.c: 93:     ADCON0bits.ADON = 1;
   814  00E8  141D               	bsf	29,0	;volatile
   815                           
   816                           ;main.c: 96:     OSCCONbits.IRCF = 0b1101 ;
   817  00E9  0819               	movf	25,w	;volatile
   818  00EA  3987               	andlw	-121
   819  00EB  3868               	iorlw	104
   820  00EC  0099               	movwf	25	;volatile
   821                           
   822                           ;main.c: 99:     OPTION_REGbits.TMR0CS = 0;
   823  00ED  1295               	bcf	21,5	;volatile
   824                           
   825                           ;main.c: 100:     OPTION_REGbits.TMR0SE = 0;
   826  00EE  1215               	bcf	21,4	;volatile
   827                           
   828                           ;main.c: 101:     OPTION_REGbits.PSA = 0;
   829  00EF  1195               	bcf	21,3	;volatile
   830                           
   831                           ;main.c: 102:     OPTION_REGbits.PS = 0b100;
   832  00F0  0815               	movf	21,w	;volatile
   833  00F1  39F8               	andlw	-8
   834  00F2  3804               	iorlw	4
   835  00F3  0095               	movwf	21	;volatile
   836                           
   837                           ;main.c: 105:     PR2 = 255;
   838  00F4  30FF               	movlw	255
   839  00F5  0020               	movlb	0	; select bank0
   840  00F6  009B               	movwf	27	;volatile
   841                           
   842                           ;main.c: 106:     T2CONbits.ON = 1;
   843  00F7  179C               	bsf	28,7	;volatile
   844                           
   845                           ;main.c: 109:     PWM3CONbits.POL = 0;
   846  00F8  002C               	movlb	12	; select bank12
   847  00F9  1219               	bcf	25,4	;volatile
   848                           
   849                           ;main.c: 110:     PWM3CONbits.EN = 1;
   850  00FA  1799               	bsf	25,7	;volatile
   851                           
   852                           ;main.c: 113:     INTCONbits.TMR0IE = 1;
   853  00FB  168B               	bsf	11,5	;volatile
   854                           
   855                           ;main.c: 114:     INTCONbits.TMR0IF = 0;
   856  00FC  110B               	bcf	11,2	;volatile
   857                           
   858                           ;main.c: 115:     INTCONbits.GIE = 1;
   859  00FD  178B               	bsf	11,7	;volatile
   860                           
   861                           ;main.c: 118:     LATA = 0x00;
   862  00FE  0022               	movlb	2	; select bank2
   863  00FF  018C               	clrf	12	;volatile
   864                           
   865                           ;main.c: 119:     LATB = 0x00;
   866  0100  018D               	clrf	13	;volatile
   867                           
   868                           ;main.c: 120:     LATC = 0x00;
   869  0101  018E               	clrf	14	;volatile
   870                           
   871                           ;main.c: 121:     _delay((unsigned long)((50)*(1000000/4000.0)));
   872  0102  3011               	movlw	17
   873  0103  00F5               	movwf	??_setup
   874  0104  303A               	movlw	58
   875  0105                     u257:	
   876  0105  0B89               	decfsz	9,f
   877  0106  2905               	goto	u257
   878  0107  0BF5               	decfsz	??_setup,f
   879  0108  2905               	goto	u257
   880  0109  3200               	nop2
   881  010A  0008               	return
   882  010B                     __end_of_setup:	
   883                           
   884                           	psect	text2
   885  0137                     __ptext2:	
   886 ;; *************** function _loop *****************
   887 ;; Defined at:
   888 ;;		line 125 in file "main.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   906 ;;Total ram usage:        0 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    3
   909 ;; This function calls:
   910 ;;		_firstProgram
   911 ;;		_secondProgram
   912 ;; This function is called by:
   913 ;;		_main
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           
   918                           ;psect for function _loop
   919  0137                     _loop:	
   920                           
   921                           ;main.c: 126:     switch(program_num) {
   922                           
   923                           ;incstack = 0
   924                           ; Regs used in _loop: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   925  0137  293E               	goto	l906
   926  0138                     l900:	
   927                           
   928                           ;main.c: 128:             firstProgram();
   929  0138  3180  2056         	fcall	_firstProgram
   930                           
   931                           ;main.c: 129:             break;
   932  013A  0008               	return
   933  013B                     l902:	
   934                           
   935                           ;main.c: 131:             secondProgram();
   936  013B  3181  210B         	fcall	_secondProgram
   937                           
   938                           ;main.c: 132:             break;
   939  013D  0008               	return
   940  013E                     l906:	
   941                           
   942                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   943                           ; Switch size 1, requested type "simple"
   944                           ; Number of cases is 1, Range of values is 0 to 0
   945                           ; switch strategies available:
   946                           ; Name         Instructions Cycles
   947                           ; simple_byte            4     3 (average)
   948                           ; direct_byte            8     6 (fixed)
   949                           ; jumptable            260     6 (fixed)
   950                           ;	Chosen strategy is simple_byte
   951  013E  0873               	movf	_program_num+1,w	;volatile
   952  013F  3A00               	xorlw	0	; case 0
   953  0140  1903               	skipnz
   954  0141  2943               	goto	l936
   955  0142  294B               	goto	l113
   956  0143                     l936:	
   957                           
   958                           ; Switch size 1, requested type "simple"
   959                           ; Number of cases is 2, Range of values is 1 to 2
   960                           ; switch strategies available:
   961                           ; Name         Instructions Cycles
   962                           ; simple_byte            7     4 (average)
   963                           ; direct_byte           13     9 (fixed)
   964                           ; jumptable            263     9 (fixed)
   965                           ;	Chosen strategy is simple_byte
   966  0143  0872               	movf	_program_num,w	;volatile
   967  0144  3A01               	xorlw	1	; case 1
   968  0145  1903               	skipnz
   969  0146  2938               	goto	l900
   970  0147  3A03               	xorlw	3	; case 2
   971  0148  1903               	skipnz
   972  0149  293B               	goto	l902
   973  014A  294B               	goto	l113
   974  014B                     l113:	
   975  014B  0008               	return
   976  014C                     __end_of_loop:	
   977                           
   978                           	psect	text3
   979  010B                     __ptext3:	
   980 ;; *************** function _secondProgram *****************
   981 ;; Defined at:
   982 ;;		line 149 in file "main.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0, pclath, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    2
  1003 ;; This function calls:
  1004 ;;		_ADC_Start
  1005 ;;		_PWM_Start
  1006 ;; This function is called by:
  1007 ;;		_loop
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           
  1012                           ;psect for function _secondProgram
  1013  010B                     _secondProgram:	
  1014                           
  1015                           ;main.c: 150:     ADC_Start(4);
  1016                           
  1017                           ;incstack = 0
  1018                           ; Regs used in _secondProgram: [wreg+status,2+status,0+pclath+cstack]
  1019  010B  3004               	movlw	4
  1020  010C  00F5               	movwf	ADC_Start@ch_sel
  1021  010D  3000               	movlw	0
  1022  010E  00F6               	movwf	ADC_Start@ch_sel+1
  1023  010F  3181  2121  3181   	fcall	_ADC_Start
  1024                           
  1025                           ;main.c: 151:     duty_cycle = (ADRESH << 8) + ADRESL ;
  1026  0112  0021               	movlb	1	; select bank1
  1027  0113  081C               	movf	28,w	;volatile
  1028  0114  0020               	movlb	0	; select bank0
  1029  0115  00A3               	movwf	_duty_cycle+1
  1030  0116  0021               	movlb	1	; select bank1
  1031  0117  081B               	movf	27,w	;volatile
  1032  0118  0020               	movlb	0	; select bank0
  1033  0119  00A2               	movwf	_duty_cycle
  1034                           
  1035                           ;main.c: 152:     PWM_Start(duty_cycle);
  1036  011A  0823               	movf	_duty_cycle+1,w
  1037  011B  00F6               	movwf	PWM_Start@dc+1
  1038  011C  0822               	movf	_duty_cycle,w
  1039  011D  00F5               	movwf	PWM_Start@dc
  1040  011E  3181  214C         	fcall	_PWM_Start
  1041  0120  0008               	return
  1042  0121                     __end_of_secondProgram:	
  1043                           
  1044                           	psect	text4
  1045  014C                     __ptext4:	
  1046 ;; *************** function _PWM_Start *****************
  1047 ;; Defined at:
  1048 ;;		line 160 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  dc              2    1[COMMON] unsigned short 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1066 ;;Total ram usage:        2 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    1
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_secondProgram
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           
  1077                           ;psect for function _PWM_Start
  1078  014C                     _PWM_Start:	
  1079                           
  1080                           ;main.c: 162:     LATCbits.LATC5 = 0;
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _PWM_Start: [wreg+status,2]
  1084  014C  0022               	movlb	2	; select bank2
  1085  014D  128E               	bcf	14,5	;volatile
  1086                           
  1087                           ;main.c: 163:     LATAbits.LATA2 = 0;
  1088  014E  110C               	bcf	12,2	;volatile
  1089                           
  1090                           ;main.c: 164:     LATAbits.LATA1 = 0;
  1091  014F  108C               	bcf	12,1	;volatile
  1092                           
  1093                           ;main.c: 165:     LATAbits.LATA5 = 0;
  1094  0150  128C               	bcf	12,5	;volatile
  1095                           
  1096                           ;main.c: 166:     PWM3DCH = dc >> 8;
  1097  0151  0876               	movf	PWM_Start@dc+1,w
  1098  0152  002C               	movlb	12	; select bank12
  1099  0153  0098               	movwf	24	;volatile
  1100                           
  1101                           ;main.c: 167:     PWM3DCL = dc & 0b11000000;
  1102  0154  0875               	movf	PWM_Start@dc,w
  1103  0155  39C0               	andlw	192
  1104  0156  0097               	movwf	23	;volatile
  1105                           
  1106                           ;main.c: 169:     RA5PPS = 0b01110;
  1107  0157  300E               	movlw	14
  1108  0158  003D               	movlb	29	; select bank29
  1109  0159  0095               	movwf	21	;volatile
  1110                           
  1111                           ;main.c: 170:     RA1PPS = 0b01110;
  1112  015A  300E               	movlw	14
  1113  015B  0091               	movwf	17	;volatile
  1114                           
  1115                           ;main.c: 171:     RA2PPS = 0b01110;
  1116  015C  300E               	movlw	14
  1117  015D  0092               	movwf	18	;volatile
  1118                           
  1119                           ;main.c: 172:     RC5PPS = 0b01110;
  1120  015E  300E               	movlw	14
  1121  015F  00A5               	movwf	37	;volatile
  1122  0160  0008               	return
  1123  0161                     __end_of_PWM_Start:	
  1124                           
  1125                           	psect	text5
  1126  0056                     __ptext5:	
  1127 ;; *************** function _firstProgram *****************
  1128 ;; Defined at:
  1129 ;;		line 136 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, status,2, status,0, pclath, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1145 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1146 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1147 ;;Total ram usage:        4 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    2
  1150 ;; This function calls:
  1151 ;;		_ADC_Start
  1152 ;; This function is called by:
  1153 ;;		_loop
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           
  1158                           ;psect for function _firstProgram
  1159  0056                     _firstProgram:	
  1160                           
  1161                           ;main.c: 138:     RA5PPS = 0b00000;
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _firstProgram: [wreg+status,2+status,0+pclath+cstack]
  1165  0056  003D               	movlb	29	; select bank29
  1166  0057  0195               	clrf	21	;volatile
  1167                           
  1168                           ;main.c: 139:     RA1PPS = 0b00000;
  1169  0058  0191               	clrf	17	;volatile
  1170                           
  1171                           ;main.c: 140:     RA2PPS = 0b00000;
  1172  0059  0192               	clrf	18	;volatile
  1173                           
  1174                           ;main.c: 141:     RC5PPS = 0b00000;
  1175  005A  01A5               	clrf	37	;volatile
  1176                           
  1177                           ;main.c: 142:     ADC_Start(4);
  1178  005B  3004               	movlw	4
  1179  005C  00F5               	movwf	ADC_Start@ch_sel
  1180  005D  3000               	movlw	0
  1181  005E  00F6               	movwf	ADC_Start@ch_sel+1
  1182  005F  3181  2121  3180   	fcall	_ADC_Start
  1183                           
  1184                           ;main.c: 143:     adc_msb = ADRESH;
  1185  0062  0021               	movlb	1	; select bank1
  1186  0063  081C               	movf	28,w	;volatile
  1187  0064  0020               	movlb	0	; select bank0
  1188  0065  00A4               	movwf	??_firstProgram
  1189  0066  01A5               	clrf	??_firstProgram+1
  1190  0067  0824               	movf	??_firstProgram,w
  1191  0068  00F8               	movwf	_adc_msb
  1192  0069  0825               	movf	??_firstProgram+1,w
  1193  006A  00F9               	movwf	_adc_msb+1
  1194                           
  1195                           ;main.c: 144:     LATCbits.LATC5 = (adc_msb & 0b10000000) >> 7;
  1196  006B  0879               	movf	_adc_msb+1,w
  1197  006C  00A5               	movwf	??_firstProgram+1
  1198  006D  0878               	movf	_adc_msb,w
  1199  006E  00A4               	movwf	??_firstProgram
  1200  006F  3007               	movlw	7
  1201  0070  00A6               	movwf	??_firstProgram+2
  1202  0071                     u215:	
  1203  0071  0D25               	rlf	??_firstProgram+1,w
  1204  0072  0CA5               	rrf	??_firstProgram+1,f
  1205  0073  0CA4               	rrf	??_firstProgram,f
  1206  0074  0BA6               	decfsz	??_firstProgram+2,f
  1207  0075  2871               	goto	u215
  1208  0076  0824               	movf	??_firstProgram,w
  1209  0077  3901               	andlw	1
  1210  0078  00A7               	movwf	??_firstProgram+3
  1211  0079  0EA7               	swapf	??_firstProgram+3,f
  1212  007A  0DA7               	rlf	??_firstProgram+3,f
  1213  007B  0022               	movlb	2	; select bank2
  1214  007C  080E               	movf	14,w	;volatile
  1215  007D  0020               	movlb	0	; select bank0
  1216  007E  0627               	xorwf	??_firstProgram+3,w
  1217  007F  39DF               	andlw	-33
  1218  0080  0627               	xorwf	??_firstProgram+3,w
  1219  0081  0022               	movlb	2	; select bank2
  1220  0082  008E               	movwf	14	;volatile
  1221                           
  1222                           ;main.c: 145:     LATAbits.LATA2 = (adc_msb & 0b01000000) >> 6;
  1223  0083  0879               	movf	_adc_msb+1,w
  1224  0084  0020               	movlb	0	; select bank0
  1225  0085  00A5               	movwf	??_firstProgram+1
  1226  0086  0878               	movf	_adc_msb,w
  1227  0087  00A4               	movwf	??_firstProgram
  1228  0088  3006               	movlw	6
  1229  0089  00A6               	movwf	??_firstProgram+2
  1230  008A                     u225:	
  1231  008A  0D25               	rlf	??_firstProgram+1,w
  1232  008B  0CA5               	rrf	??_firstProgram+1,f
  1233  008C  0CA4               	rrf	??_firstProgram,f
  1234  008D  0BA6               	decfsz	??_firstProgram+2,f
  1235  008E  288A               	goto	u225
  1236  008F  0824               	movf	??_firstProgram,w
  1237  0090  3901               	andlw	1
  1238  0091  00A7               	movwf	??_firstProgram+3
  1239  0092  0DA7               	rlf	??_firstProgram+3,f
  1240  0093  0DA7               	rlf	??_firstProgram+3,f
  1241  0094  0022               	movlb	2	; select bank2
  1242  0095  080C               	movf	12,w	;volatile
  1243  0096  0020               	movlb	0	; select bank0
  1244  0097  0627               	xorwf	??_firstProgram+3,w
  1245  0098  39FB               	andlw	-5
  1246  0099  0627               	xorwf	??_firstProgram+3,w
  1247  009A  0022               	movlb	2	; select bank2
  1248  009B  008C               	movwf	12	;volatile
  1249                           
  1250                           ;main.c: 146:     LATAbits.LATA1 = (adc_msb & 0b00100000) >> 5;
  1251  009C  0879               	movf	_adc_msb+1,w
  1252  009D  0020               	movlb	0	; select bank0
  1253  009E  00A5               	movwf	??_firstProgram+1
  1254  009F  0878               	movf	_adc_msb,w
  1255  00A0  00A4               	movwf	??_firstProgram
  1256  00A1  3005               	movlw	5
  1257  00A2  00A6               	movwf	??_firstProgram+2
  1258  00A3                     u235:	
  1259  00A3  0D25               	rlf	??_firstProgram+1,w
  1260  00A4  0CA5               	rrf	??_firstProgram+1,f
  1261  00A5  0CA4               	rrf	??_firstProgram,f
  1262  00A6  0BA6               	decfsz	??_firstProgram+2,f
  1263  00A7  28A3               	goto	u235
  1264  00A8  0824               	movf	??_firstProgram,w
  1265  00A9  3901               	andlw	1
  1266  00AA  00A7               	movwf	??_firstProgram+3
  1267  00AB  0DA7               	rlf	??_firstProgram+3,f
  1268  00AC  0022               	movlb	2	; select bank2
  1269  00AD  080C               	movf	12,w	;volatile
  1270  00AE  0020               	movlb	0	; select bank0
  1271  00AF  0627               	xorwf	??_firstProgram+3,w
  1272  00B0  39FD               	andlw	-3
  1273  00B1  0627               	xorwf	??_firstProgram+3,w
  1274  00B2  0022               	movlb	2	; select bank2
  1275  00B3  008C               	movwf	12	;volatile
  1276                           
  1277                           ;main.c: 147:     LATAbits.LATA5 = (adc_msb & 0b00010000) >> 4;
  1278  00B4  0879               	movf	_adc_msb+1,w
  1279  00B5  0020               	movlb	0	; select bank0
  1280  00B6  00A5               	movwf	??_firstProgram+1
  1281  00B7  0878               	movf	_adc_msb,w
  1282  00B8  00A4               	movwf	??_firstProgram
  1283  00B9  3004               	movlw	4
  1284  00BA  00A6               	movwf	??_firstProgram+2
  1285  00BB                     u245:	
  1286  00BB  0D25               	rlf	??_firstProgram+1,w
  1287  00BC  0CA5               	rrf	??_firstProgram+1,f
  1288  00BD  0CA4               	rrf	??_firstProgram,f
  1289  00BE  0BA6               	decfsz	??_firstProgram+2,f
  1290  00BF  28BB               	goto	u245
  1291  00C0  0824               	movf	??_firstProgram,w
  1292  00C1  3901               	andlw	1
  1293  00C2  00A7               	movwf	??_firstProgram+3
  1294  00C3  0EA7               	swapf	??_firstProgram+3,f
  1295  00C4  0DA7               	rlf	??_firstProgram+3,f
  1296  00C5  0022               	movlb	2	; select bank2
  1297  00C6  080C               	movf	12,w	;volatile
  1298  00C7  0020               	movlb	0	; select bank0
  1299  00C8  0627               	xorwf	??_firstProgram+3,w
  1300  00C9  39DF               	andlw	-33
  1301  00CA  0627               	xorwf	??_firstProgram+3,w
  1302  00CB  0022               	movlb	2	; select bank2
  1303  00CC  008C               	movwf	12	;volatile
  1304  00CD  0008               	return
  1305  00CE                     __end_of_firstProgram:	
  1306                           
  1307                           	psect	text6
  1308  0121                     __ptext6:	
  1309 ;; *************** function _ADC_Start *****************
  1310 ;; Defined at:
  1311 ;;		line 154 in file "main.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  ch_sel          2    1[COMMON] int 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1328 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1329 ;;Total ram usage:        3 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    1
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_firstProgram
  1336 ;;		_secondProgram
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           
  1341                           ;psect for function _ADC_Start
  1342  0121                     _ADC_Start:	
  1343                           
  1344                           ;main.c: 155:     ADCON0bits.CHS = ch_sel;
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _ADC_Start: [wreg+status,2+status,0]
  1348  0121  0875               	movf	ADC_Start@ch_sel,w
  1349  0122  00F7               	movwf	??_ADC_Start
  1350  0123  0DF7               	rlf	??_ADC_Start,f
  1351  0124  0DF7               	rlf	??_ADC_Start,f
  1352  0125  0021               	movlb	1	; select bank1
  1353  0126  081D               	movf	29,w	;volatile
  1354  0127  0677               	xorwf	??_ADC_Start,w
  1355  0128  3983               	andlw	-125
  1356  0129  0677               	xorwf	??_ADC_Start,w
  1357  012A  009D               	movwf	29	;volatile
  1358                           
  1359                           ;main.c: 156:     _delay((unsigned long)((10)*(1000000/4000.0)));
  1360  012B  3004               	movlw	4
  1361  012C  00F7               	movwf	??_ADC_Start
  1362  012D  303E               	movlw	62
  1363  012E                     u267:	
  1364  012E  0B89               	decfsz	9,f
  1365  012F  292E               	goto	u267
  1366  0130  0BF7               	decfsz	??_ADC_Start,f
  1367  0131  292E               	goto	u267
  1368                           
  1369                           ;main.c: 157:     ADCON0bits.GO_nDONE = 1;
  1370  0132  0021               	movlb	1	; select bank1
  1371  0133  149D               	bsf	29,1	;volatile
  1372  0134                     l122:	
  1373                           ;main.c: 158:     while(ADCON0bits.GO_nDONE);
  1374                           
  1375  0134  1C9D               	btfss	29,1	;volatile
  1376  0135  0008               	return
  1377  0136  2934               	goto	l122
  1378  0137                     __end_of_ADC_Start:	
  1379                           
  1380                           	psect	intentry
  1381  0004                     __pintentry:	
  1382 ;; *************** function _myIsr *****************
  1383 ;; Defined at:
  1384 ;;		line 43 in file "main.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1400 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1401 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1402 ;;Total ram usage:        1 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		Interrupt level 1
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411  0004                     _myIsr:	
  1412                           
  1413                           ;incstack = 0
  1414  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1415                           
  1416                           ; Regs used in _myIsr: [wreg+status,2]
  1417  0005  3180               	pagesel	$
  1418                           
  1419                           ;main.c: 46:     if(INTCONbits.TMR0IF == 1) {
  1420  0006  1D0B               	btfss	11,2	;volatile
  1421  0007  2831               	goto	L1
  1422                           
  1423                           ;main.c: 48:         if(PORTCbits.RC4 == 0) {
  1424  0008  0020               	movlb	0	; select bank0
  1425  0009  1A0E               	btfsc	14,4	;volatile
  1426  000A  282C               	goto	i1l90
  1427                           
  1428                           ;main.c: 49:             sw1_debounce_count++;
  1429  000B  3001               	movlw	1
  1430  000C  07A0               	addwf	_sw1_debounce_count,f
  1431  000D  3000               	movlw	0
  1432  000E  3DA1               	addwfc	_sw1_debounce_count+1,f
  1433                           
  1434                           ;main.c: 50:             if(sw1_debounce_count == sw1_debounce_thres) {
  1435  000F  0829               	movf	_sw1_debounce_thres+1,w
  1436  0010  0621               	xorwf	_sw1_debounce_count+1,w
  1437  0011  1D03               	skipz
  1438  0012  2815               	goto	u18_25
  1439  0013  0828               	movf	_sw1_debounce_thres,w
  1440  0014  0620               	xorwf	_sw1_debounce_count,w
  1441  0015                     u18_25:	
  1442  0015  1D03               	skipz
  1443  0016  2830               	goto	i1l858
  1444                           
  1445                           ;main.c: 52:                 program_num++;
  1446  0017  3001               	movlw	1
  1447  0018  07F2               	addwf	_program_num,f	;volatile
  1448  0019  3000               	movlw	0
  1449  001A  3DF3               	addwfc	_program_num+1,f	;volatile
  1450                           
  1451                           ;main.c: 53:                 if(program_num > program_limit) {
  1452  001B  0871               	movf	_program_limit+1,w	;volatile
  1453  001C  3A80               	xorlw	128
  1454  001D  00F4               	movwf	??_myIsr
  1455  001E  0873               	movf	_program_num+1,w	;volatile
  1456  001F  3A80               	xorlw	128
  1457  0020  0274               	subwf	??_myIsr,w
  1458  0021  1D03               	skipz
  1459  0022  2825               	goto	u19_25
  1460  0023  0872               	movf	_program_num,w	;volatile
  1461  0024  0270               	subwf	_program_limit,w	;volatile
  1462  0025                     u19_25:	
  1463  0025  1803               	skipnc
  1464  0026  2830               	goto	i1l858
  1465                           
  1466                           ;main.c: 54:                     program_num = 1;
  1467  0027  3001               	movlw	1
  1468  0028  00F2               	movwf	_program_num	;volatile
  1469  0029  3000               	movlw	0
  1470  002A  00F3               	movwf	_program_num+1	;volatile
  1471  002B  2830               	goto	i1l858
  1472  002C                     i1l90:	
  1473                           ;main.c: 58:         else if(PORTCbits.RC4 == 1) {
  1474                           
  1475  002C  1E0E               	btfss	14,4	;volatile
  1476  002D  2830               	goto	i1l858
  1477                           
  1478                           ;main.c: 59:             sw1_debounce_count = 0;
  1479  002E  01A0               	clrf	_sw1_debounce_count
  1480  002F  01A1               	clrf	_sw1_debounce_count+1
  1481  0030                     i1l858:	
  1482                           
  1483                           ;main.c: 64:     INTCONbits.TMR0IF = 0;
  1484  0030  110B               	bcf	11,2	;volatile
  1485  0031                     L1:	
  1486  0031  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1487  0032  0009               	retfie
  1488  0033                     __end_of_myIsr:	
  1489  007E                     btemp	set	126	;btemp
  1490  007E                     int$flags	set	126
  1491  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         6
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      10
    BANK0            80      4      10
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _secondProgram->_ADC_Start
    _firstProgram->_ADC_Start

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _loop->_firstProgram

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     468
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0     468
                       _firstProgram
                      _secondProgram
 ---------------------------------------------------------------------------------
 (2) _secondProgram                                        0     0      0     294
                          _ADC_Start
                          _PWM_Start
 ---------------------------------------------------------------------------------
 (3) _PWM_Start                                            2     0      2     120
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _firstProgram                                         4     4      0     174
                                              0 BANK0      4     4      0
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            3     1      2     174
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _firstProgram
       _ADC_Start
     _secondProgram
       _ADC_Start
       _PWM_Start
   _setup

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      4       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       A       5       12.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      14      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      14      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 14 12:58:34 2019

            __CFG_CP$OFF 0000       __size_of_ADC_Start 0016              __CFG_LVP$ON 0000  
                    l113 014B                      l122 0134                      l900 0138  
                    l902 013B                      l906 013E                      l914 0164  
                    l936 0143                      u215 0071                      u225 008A  
                    u235 00A3                      u245 00BB                      _PR2 001B  
                    u257 0105                      u267 012E             __CFG_BORV$LO 0000  
                    wreg 0009             __CFG_IESO$ON 0000             __CFG_ZCD$OFF 0000  
                   _LATA 010C                     _LATB 010D                     _LATC 010E  
                   i1l90 002C             __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000  
                   _main 0161                     _loop 0137                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0033            __CFG_MCLRE$ON 0000  
                  ?_main 0074                    ?_loop 0074            __CFG_WDTE$OFF 0000  
                  i1l858 0030                    u18_25 0015                    u19_25 0025  
                  _TRISA 008C                    _TRISB 008D                    _TRISC 008E  
          ?_firstProgram 0074    __end_of_secondProgram 0121                    _myIsr 0004  
                  _setup 00CE        __end_of_ADC_Start 0137                    wtemp0 007E  
     __size_of_PWM_Start 0015          __initialization 0035             __end_of_main 0169  
           __end_of_loop 014C           __CFG_LPBOR$OFF 0000                   ??_main 0078  
                 ??_loop 0078           ??_firstProgram 0024           __CFG_PLLEN$OFF 0000  
                 _ADRESH 009C                   ?_myIsr 0074                   _ADRESL 009B  
                 ?_setup 0074                   _ANSELA 018C                   _ANSELB 018D  
                 _ANSELC 018E                   _RA1PPS 0E91                   _RA2PPS 0E92  
                 _RA5PPS 0E95                   _RC5PPS 0EA5           __CFG_PWRTE$OFF 0000  
         __CFG_STVREN$ON 0000             __pdataCOMMON 0070        __end_of_PWM_Start 0161  
__end_of__initialization 0052           __pcstackCOMMON 0074             __pidataBANK0 016D  
          __end_of_myIsr 0033            __end_of_setup 010B           _OPTION_REGbits 0095  
                ??_myIsr 0074                  ??_setup 0075               __pbssBANK0 0020  
   __end_of_firstProgram 00CE               __pmaintext 0161          __CFG_PPS1WAY$ON 0000  
             __pintentry 0004          __CFG_WDTCCS$SWC 0000                  _PWM3DCH 0618  
                _PWM3DCL 0617                _ADC_Start 0121                  _adc_msb 0078  
                __ptext1 00CE                  __ptext2 0137                  __ptext3 010B  
                __ptext4 014C                  __ptext5 0056                  __ptext6 0121  
              _T2CONbits 001C               _duty_cycle 0022     end_of_initialization 0052  
             ?_ADC_Start 0075   __size_of_secondProgram 0016                _PORTCbits 000E  
       __CFG_FOSC$INTOSC 0000       _sw1_debounce_count 0020       _sw1_debounce_thres 0028  
              _PWM_Start 014C    __size_of_firstProgram 0078            __pidataCOMMON 0169  
           _firstProgram 0056      start_initialization 0035            _secondProgram 010B  
             ?_PWM_Start 0075              ??_ADC_Start 0077              __pdataBANK0 0028  
         ?_secondProgram 0074              __pbssCOMMON 0078          ADC_Start@ch_sel 0075  
              ___latbits 0002            __pcstackBANK0 0024              PWM_Start@dc 0075  
         __size_of_myIsr 002F              ??_PWM_Start 0077           __size_of_setup 003D  
               _LATAbits 010C                 _LATCbits 010E     __CFG_WDTCPS$WDTCPS1F 0000  
             _ADCON0bits 009D               _ADCON1bits 009E          ??_secondProgram 0078  
               _WPUCbits 020E            __size_of_main 0008            __size_of_loop 0015  
   __CFG_WDTCWS$WDTCWSSW 0000                 int$flags 007E               _INTCONbits 000B  
            _PWM3CONbits 0619                 intlevel1 0000        __CFG_CLKOUTEN$OFF 0000  
             _OSCCONbits 0099            _program_limit 0070              _program_num 0072  
